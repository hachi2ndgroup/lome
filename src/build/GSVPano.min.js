var GSVPANO=GSVPANO||{};
GSVPANO.PanoLoader=function(g){
  var g=g||{},d,k,m=new google.maps.StreetViewService,f=0,h=0,a=document.createElement("canvas"),i=a.getContext("2d");

  this.setProgress=function(b){
    if(this.onProgress)
      this.onProgress(b)
    };

  this.throwError=function(b){
    if(this.onError)
      this.onError(b);
    else
    console.error(b)
  };

  this.adaptTextureToZoom=function(){
      var b=416*Math.pow(2,d),c=416*Math.pow(2,d-1);
      a.width=b;
      a.height=c;
      i.translate(a.width,0);
      i.scale(-1,1)
    };

  this.composeFromTile=function(b,c,j){
    i.drawImage(j,512*b,512*c);
    f++;
    this.setProgress(Math.round(100*f/h));
    if(f===h&&(this.canvas=a,this.onPanoramaLoad))
    this.onPanoramaLoad()
  };

  this.composePanorama=function(){
    this.setProgress(0);
    console.log("Loading panorama for zoom "+d+"...");
    var b=Math.pow(2,d),c=Math.pow(2,d-1),j=this,l,a,e;
    f=0;
    h=b*c;
    for(e=0;e<c;e++)
      for(a=0;a<b;a++)
        l="http://maps.google.com/cbk?output=tile&panoid="+k+"&zoom="+d+"&x="+a+"&y="+e+"&"+Date.now(),function(b,c){
          console.log("url:"+l);
          var a=new Image;
          a.addEventListener("load",function(){
            j.composeFromTile(b,c,this)
          });
          a.crossOrigin="";
          a.src=l

        }(a,e)

  };

    this.load=function(b){
      console.log("Load for",b);
      var c=this;
      m.getPanoramaByLocation(b,50,function(a,d){
        if(d===google.maps.StreetViewStatus.OK){
          if(c.onPanoramaData)c.onPanoramaData(a);
          google.maps.geometry.spherical.computeHeading(b,a.location.latLng);
          c.copyright=a.copyright;
          k=a.location.pano;
          c.location=b;
          c.composePanorama()
        }else{
          if(c.onNoPanoramaData)c.onNoPanoramaData(d);
          c.throwError("Could not retrieve panorama for the following reason: "+d)

        }
      })
    };
    this.setZoom=function(a){
      d=a;
      this.adaptTextureToZoom()
    };
    this.setZoom(g.zoom||1)

};


    // Base64データをBlobデータに変換
    function Base64toBlob(base64)
    {
        // カンマで分割して以下のようにデータを分ける
        // tmp[0] : データ形式（data:image/png;base64）
        // tmp[1] : base64データ（iVBORw0k～）
        var tmp = base64.split(',');
        // base64データの文字列をデコード
        var data = atob(tmp[1]);
        // tmp[0]の文字列（data:image/png;base64）からコンテンツタイプ（image/png）部分を取得
    	var mime = tmp[0].split(':')[1].split(';')[0];
        //  1文字ごとにUTF-16コードを表す 0から65535 の整数を取得
    	var buf = new Uint8Array(data.length);
    	for (var i = 0; i < data.length; i++) {
            buf[i] = data.charCodeAt(i);
        }
        // blobデータを作成
    	var blob = new Blob([buf], { type: mime });
        return blob;
    }

    // 画像のダウンロード
    function saveBlob(blob, fileName)
    {

        var url = (window.URL || window.webkitURL);

        // ダウンロード用のURL作成
        var dataUrl = url.createObjectURL(blob);
        console.log("filepath:"+window.URL);
        // イベント作成
        var event = document.createEvent("MouseEvents");
        event.initMouseEvent("click", true, false, window, 0, 0, 0, 0, 0, false, false, false, false, 0, null);
        // a要素を作成
        var a = document.createElementNS("http://www.w3.org/1999/xhtml", "a");
        // ダウンロード用のURLセット
        a.href = dataUrl;
        // ファイル名セット
        a.download = fileName;
        // イベントの発火
        a.dispatchEvent(event);

    }
